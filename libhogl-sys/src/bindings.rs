/* automatically generated by rust-bindgen */

#[doc = " hogl context structure contains all the needed information for all hogl operations"]
#[doc = " it is used to make sure the library is initialized, keeps track of event loops etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hogl_context {
    #[doc = " Number of windows created"]
    pub m_wnd_count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_hogl_context() {
    assert_eq!(
        ::std::mem::size_of::<hogl_context>(),
        4usize,
        concat!("Size of: ", stringify!(hogl_context))
    );
    assert_eq!(
        ::std::mem::align_of::<hogl_context>(),
        4usize,
        concat!("Alignment of ", stringify!(hogl_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hogl_context>())).m_wnd_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hogl_context),
            "::",
            stringify!(m_wnd_count)
        )
    );
}
#[doc = " hogl window"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hogl_wnd {
    #[doc = " Native window of created with the help of GLFW"]
    #[doc = " in reality this is a type erased GLFW window"]
    pub mp_native_window: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hogl_wnd() {
    assert_eq!(
        ::std::mem::size_of::<hogl_wnd>(),
        8usize,
        concat!("Size of: ", stringify!(hogl_wnd))
    );
    assert_eq!(
        ::std::mem::align_of::<hogl_wnd>(),
        8usize,
        concat!("Alignment of ", stringify!(hogl_wnd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hogl_wnd>())).mp_native_window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hogl_wnd),
            "::",
            stringify!(mp_native_window)
        )
    );
}
extern "C" {
    #[doc = " Initializes hogl library, this function should only be called once, calling twice is undefined"]
    #[doc = " behaviour"]
    pub fn hogl_init() -> *mut hogl_context;
}
extern "C" {
    #[doc = " Shuts down the hogl library, this function should only be called once, calling twice is undefined"]
    #[doc = " behaviour"]
    pub fn hogl_shutdown(context: *mut *mut hogl_context);
}
extern "C" {
    #[doc = " Creates a hogl window"]
    #[doc = " @param pContext hogl context received from hogl_init function"]
    #[doc = " @return hogl_wnd instance or null if there was an error"]
    pub fn hogl_wnd_create(context: *mut hogl_context) -> *mut hogl_wnd;
}
extern "C" {
    #[doc = " Destroys a hogl window"]
    #[doc = " @param pWnd window received from hogl_wnd_create function to destroy"]
    pub fn hogl_wnd_destroy(wnd: *mut *mut hogl_wnd);
}
